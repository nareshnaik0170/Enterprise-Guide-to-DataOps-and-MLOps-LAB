# -*- coding: utf-8 -*-
"""mlopsprg1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10WS_gOT_WH0zvW5gI4mUnhlxcJDQZNxS
"""

# Step 1: Import Required Libraries
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report

# Step 2: Data Loader Class
class DataLoader:
    """Loads and splits the Iris dataset."""
    def __init__(self):
        self.X, self.y = load_iris(return_X_y=True)

    def split(self, test_size=0.3, random_state=42):
        """Splits the data into training and testing sets."""
        return train_test_split(self.X, self.y, test_size=test_size, random_state=random_state)

# Step 3: Preprocessor Class
class Preprocessor:
    """Scales the features using StandardScaler."""
    def __init__(self):
        self.scaler = StandardScaler()

    def fit_transform(self, X_train):
        """Fits the scaler to the training data and transforms it."""
        return self.scaler.fit_transform(X_train)

    def transform(self, X_test):
        """Transforms the test data using the fitted scaler."""
        return self.scaler.transform(X_test)

# Step 4: ML Model Class
class MLModel:
    """A Decision Tree Classifier model."""
    def __init__(self):
        self.model = DecisionTreeClassifier()

    def train(self, X_train, y_train):
        """Trains the model on the provided data."""
        self.model.fit(X_train, y_train)

    def predict(self, X_test):
        """Makes predictions on the test data."""
        return self.model.predict(X_test)

# Step 5: Evaluator Class
class Evaluator:
    """Evaluates the model and prints a classification report."""
    def __init__(self, y_true, y_pred):
        self.y_true = y_true
        self.y_pred = y_pred

    def report(self):
        """Prints the classification report."""
        print("ðŸ“‹ Classification Report:\n")
        print(classification_report(self.y_true, self.y_pred))

# Step 6: Main ML Application Class
class MLApplication:
    """Encapsulates the entire machine learning pipeline."""
    def __init__(self):
        self.loader = DataLoader()
        self.preprocessor = Preprocessor()
        self.model = MLModel()

    def run(self):
        """Executes all steps of the ML pipeline."""
        # Load and split data
        X_train, X_test, y_train, y_test = self.loader.split()

        # Preprocess data
        X_train_scaled = self.preprocessor.fit_transform(X_train)
        X_test_scaled = self.preprocessor.transform(X_test)

        # Train model
        self.model.train(X_train_scaled, y_train)

        # Make predictions
        y_pred = self.model.predict(X_test_scaled)

        # Evaluate the model
        evaluator = Evaluator(y_test, y_pred)
        evaluator.report()


# Step 7: Execute the Pipeline
if __name__ == "__main__":
  app = MLApplication()
  app.run()